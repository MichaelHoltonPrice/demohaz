% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/siler.R
\name{fast_transformed_nllsiler}
\alias{fast_transformed_nllsiler}
\title{Calculate the negative log-likelihood for the Siler distribution using counts
(hence fast) and assuming a transformed parameter vector.}
\usage{
fast_transformed_nllsiler(bbar, xvalues, xcounts, b0, x0 = 0)
}
\arguments{
\item{bbar}{The transformed parameter vector, used to increase robustness of
fitting}

\item{xvalues}{Locations at which to evaluate probability density function}

\item{xcounts}{The number of observations for each entry in xvalues}

\item{b0}{The baseline parameter vector}

\item{x0}{The conditional starting age [default: 0].}
}
\value{
The negative log-likelihood
}
\description{
The vector of ages may contain repeats. If there are many repeats, the
negative log-likelihood calculation will be slow if it is repeated for each
repeated value in x. To avoid this, the inputs to this function are a
vector of xvalues and corresponding counts. These two vectors can be created
from the vector of ages, x, using the following code:

xtable <- table(x)
xvalues <- as.numeric(names(xtable))
xcounts <- as.numeric(xtable)

The Siler hazard is:

lambda(x) = b1 * exp(-b_2*x) + b_3 + b5 * exp(b5*(x-b4))

Let b0 be a baseline parameter vector and define the transformed parameter
vector bbar to be (the notation is modified slightly from, e.g., b1 to b_1
to accommodate the initial parameter vector being b0)

b_1 = b0_1 * exp(bbar1)
b_2 = b0_2 * exp(bbar2)
b_3 = b0_3 * exp(bbar3)
b_4 = b0_4 * exp(bbar4)
b_5 = b0_5 * exp(bbar5)

This second transformation allows the parameter vector bbar to be
unconstrained (positive or negative) while the parameter vector b is
positive (assuming that the baseline vector beta is positive, which should
be ensured in its construction).
}
